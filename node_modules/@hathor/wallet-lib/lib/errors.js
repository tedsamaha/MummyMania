"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetDagMetadataApiError = exports.WalletFromXPubGuard = exports.MineTxError = exports.SendTxError = exports.UtxoError = exports.WalletRequestError = exports.WalletError = exports.ParseScriptError = exports.ParseError = exports.InvalidWords = exports.UncompressedPubKeyError = exports.XPubError = exports.WalletTypeError = exports.MaximumNumberParentsError = exports.MaximumNumberOutputsError = exports.MaximumNumberInputsError = exports.TokenValidationError = exports.CreateTokenTxInvalid = exports.ConstantNotSet = exports.InsufficientFundsError = exports.OutputValueError = exports.AddressError = void 0;

/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Possible errors to be thrown in wallet
 *
 * @namespace Errors
 */

/**
 * Error thrown when address is invalid
 *
 * @memberof Errors
 * @inner
 */
class AddressError extends Error {}
/**
 * Error thrown when output value is invalid
 *
 * @memberof Errors
 * @inner
 */


exports.AddressError = AddressError;

class OutputValueError extends Error {}
/**
 * Error thrown when we have insufficient funds
 *
 * @memberof Errors
 * @inner
 */


exports.OutputValueError = OutputValueError;

class InsufficientFundsError extends Error {}
/**
 * Error thrown when a constant that we get from the server is not set
 *
 * @memberof Errors
 * @inner
 */


exports.InsufficientFundsError = InsufficientFundsError;

class ConstantNotSet extends Error {}
/**
 * Error thrown when a create token tx has invalid info
 *
 * @memberof Errors
 * @inner
 */


exports.ConstantNotSet = ConstantNotSet;

class CreateTokenTxInvalid extends Error {}
/**
 * Error thrown when validating a registration of new token
 *
 * @memberof Errors
 * @inner
 */


exports.CreateTokenTxInvalid = CreateTokenTxInvalid;

class TokenValidationError extends Error {}
/**
 * Error thrown when transaction has more inputs than the maximum allowed
 *
 * @memberof Errors
 * @inner
 */


exports.TokenValidationError = TokenValidationError;

class MaximumNumberInputsError extends Error {}
/**
 * Error thrown when transaction has more outputs than the maximum allowed
 *
 * @memberof Errors
 * @inner
 */


exports.MaximumNumberInputsError = MaximumNumberInputsError;

class MaximumNumberOutputsError extends Error {}
/**
 * Error thrown when transaction has more parents than the maximum allowed
 *
 * @memberof Errors
 * @inner
 */


exports.MaximumNumberOutputsError = MaximumNumberOutputsError;

class MaximumNumberParentsError extends Error {}
/**
 * Error thrown when the wallet type is invalid
 *
 * @memberof Errors
 * @inner
 */


exports.MaximumNumberParentsError = MaximumNumberParentsError;

class WalletTypeError extends Error {}
/**
 * Error thrown when we are given an invalid xpubkey
 *
 * @memberof Errors
 * @inner
 */


exports.WalletTypeError = WalletTypeError;

class XPubError extends Error {}
/**
 * Error thrown when we are given an invalid uncompressed public key
 *
 * @memberof Errors
 * @inner
 */


exports.XPubError = XPubError;

class UncompressedPubKeyError extends Error {}
/**
 * Error thrown when the user tries to create a wallet with an invalid sequence of words
 *
 * @memberof Errors
 * @inner
 */


exports.UncompressedPubKeyError = UncompressedPubKeyError;

class InvalidWords extends Error {}
/**
 * Error thrown when parsing bytes to an object
 *
 * @memberof Errors
 * @inner
 */


exports.InvalidWords = InvalidWords;

class ParseError extends Error {}
/**
 * Error thrown when parsing a script bytes
 *
 * @memberof Errors
 * @inner
 */


exports.ParseError = ParseError;

class ParseScriptError extends ParseError {}
/**
 * Error thrown when executing wallet operations
 *
 * @memberof Errors
 * @inner
 */


exports.ParseScriptError = ParseScriptError;

class WalletError extends Error {}
/**
 * Error thrown when executing wallet requests
 *
 * @memberof Errors
 * @inner
 */


exports.WalletError = WalletError;

class WalletRequestError extends WalletError {}
/**
 * Error thrown when get utxo fails
 *
 * @memberof Errors
 * @inner
 */


exports.WalletRequestError = WalletRequestError;

class UtxoError extends WalletError {}
/**
 * Error thrown when sending tx
 *
 * @memberof Errors
 * @inner
 */


exports.UtxoError = UtxoError;

class SendTxError extends WalletError {}
/**
 * Error thrown when mining tx
 *
 * @memberof Errors
 * @inner
 */


exports.SendTxError = SendTxError;

class MineTxError extends WalletError {}
/**
 * Error thrown when calling a protected method on an xpub inited wallet
 * Some methods require access to the words or private key
 *
 * @memberof Errors
 * @inner
 */


exports.MineTxError = MineTxError;

class WalletFromXPubGuard extends Error {}
/**
 * Error thrown when there is an error getting dag metadata using wallet service
 *
 * @memberof Errors
 * @inner
 */


exports.WalletFromXPubGuard = WalletFromXPubGuard;

class GetDagMetadataApiError extends Error {}

exports.GetDagMetadataApiError = GetDagMetadataApiError;