"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.axiosInstance = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../../constants");
const config_1 = __importDefault(require("../../config"));
/**
 * Method that creates an axios instance
 *
 * @module Axios
 */
/**
 * Create an axios instance to be used when sending requests
 *
 * @param {number} timeout Timeout in milliseconds for the request
 */
exports.axiosInstance = (wallet, needsAuth, timeout = constants_1.TIMEOUT) => __awaiter(void 0, void 0, void 0, function* () {
    // TODO How to allow 'Retry' request?
    const defaultOptions = {
        baseURL: config_1.default.getWalletServiceBaseUrl(wallet.network),
        timeout: timeout,
        // `validateStatus` defines whether to resolve or reject the promise for a given
        // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
        // or `undefined`), the promise will be resolved; otherwise, the promise will be
        // rejected. The default behaviour of axios is to reject anything different than 2xx
        // We need to handle some 400 manually (e.g. create wallet might already be loaded)
        validateStatus: (status) => status >= 200 && status < 500,
        headers: {
            'Content-Type': 'application/json',
        },
    };
    if (needsAuth) {
        // Then we need the auth token
        yield wallet.validateAndRenewAuthToken();
        defaultOptions['headers']['Authorization'] = `Bearer ${wallet.getAuthToken()}`;
    }
    return axios_1.default.create(defaultOptions);
});
exports.default = exports.axiosInstance;
//# sourceMappingURL=walletServiceAxios.js.map