"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const walletServiceAxios_1 = require("./walletServiceAxios");
const errors_1 = require("../../errors");
/**
 * Api calls for wallet
 *
 * @namespace ApiWallet
 */
const walletApi = {
    getWalletStatus(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/status');
            const data = response.data;
            if (response.status === 200 && data.success) {
                return data;
            }
            else {
                throw new errors_1.WalletRequestError('Error getting wallet status.');
            }
        });
    },
    createWallet(wallet, xpubkey, firstAddress = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { xpubkey };
            if (firstAddress) {
                data['firstAddress'] = firstAddress;
            }
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, false);
            const response = yield axios.post('wallet/init', data);
            if (response.status === 200 && response.data.success) {
                return response.data;
            }
            else if (response.status === 400 && response.data.error === 'wallet-already-loaded') {
                // If it was already loaded, we have to check if it's ready
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error creating wallet.');
            }
        });
    },
    getAddresses(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/addresses');
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error getting wallet addresses.');
            }
        });
    },
    getNewAddresses(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/addresses/new');
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error getting wallet addresses to use.');
            }
        });
    },
    getBalances(wallet, token = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { params: {} };
            if (token) {
                data['params']['token_id'] = token;
            }
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/balances', data);
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error getting wallet balance.');
            }
        });
    },
    getTokens(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/tokens');
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error getting list of tokens.');
            }
        });
    },
    getHistory(wallet, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { params: options };
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/history', data);
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error getting wallet history.');
            }
        });
    },
    getUtxos(wallet, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { params: options };
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.get('wallet/utxos', data);
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error requesting utxo.');
            }
        });
    },
    createTxProposal(wallet, txHex) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { txHex };
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.post('tx/proposal', data);
            if (response.status === 201) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error creating tx proposal.');
            }
        });
    },
    updateTxProposal(wallet, id, txHex) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { txHex };
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, true);
            const response = yield axios.put(`tx/proposal/${id}`, data);
            if (response.status === 200) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error sending tx proposal.');
            }
        });
    },
    createAuthToken(wallet, timestamp, xpub, sign) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = { ts: timestamp, xpub, sign };
            const axios = yield walletServiceAxios_1.axiosInstance(wallet, false);
            const response = yield axios.post('auth/token', data);
            if (response.status === 200 && response.data.success === true) {
                return response.data;
            }
            else {
                throw new errors_1.WalletRequestError('Error requesting auth token.');
            }
        });
    },
};
exports.default = walletApi;
//# sourceMappingURL=walletApi.js.map