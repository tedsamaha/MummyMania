"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _wallet = _interopRequireDefault(require("./wallet"));

var _helpers = _interopRequireDefault(require("./helpers"));

var _websocket = _interopRequireDefault(require("./websocket"));

var _events = _interopRequireDefault(require("events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
class WebSocketHandler extends _events.default {
  constructor() {
    super();
    this.websocket = null;
  }

  setup() {
    if (this.websocket === null) {
      this.websocket = new _websocket.default({
        wsURL: _helpers.default.getWSServerURL
      });
      this.on('is_online', this.handleIsOnline);
      /*
       * This class still exists for compatibility reasons
       * it is used in some wallets and in our old lib code
       * In the wallets we capture some events from it, so
       * this following code is to emit all events emitted from this.websocket
       */

      this.oldEmit = this.websocket.emit;

      this.websocket.emit = (type, data) => {
        this.emit(type, data);
        return this.oldEmit.apply(this.websocket, [type, data]);
      };
    } // To keep compatibility with methods previously used in this singleton


    return this.websocket.setup();
  }

  handleIsOnline(value) {
    if (value) {
      _wallet.default.onWebsocketOpened();

      this.websocket.emit('reload_data');
    } else {
      _wallet.default.onWebsocketBeforeClose();
    }
  }

  endConnection() {
    // To keep compatibility with methods previously used in this singleton
    if (this.websocket !== null) {
      this.websocket.endConnection();

      this.websocket.emit = () => {};

      this.websocket = null;
      this.removeListener('is_online', this.handleIsOnline);
    }
  }

}

const instance = new WebSocketHandler();
var _default = instance;
exports.default = _default;