"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const explorerServiceAxios_1 = __importDefault(require("./explorerServiceAxios"));
const helpers_1 = __importDefault(require("../utils/helpers"));
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const metadataApi = {
    getDagMetadata(id, network, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const newOptions = Object.assign({
                retries: constants_1.METADATA_RETRY_LIMIT,
                retryInterval: constants_1.DOWNLOAD_METADATA_RETRY_INTERVAL,
            }, options);
            let { retries, retryInterval } = newOptions;
            while (retries >= 0) {
                const axios = yield explorerServiceAxios_1.default(network);
                try {
                    const response = yield axios.get(`metadata/dag`, { params: { id } });
                    if (response.data) {
                        return response.data;
                    }
                    else {
                        // Error downloading metadata
                        // throw Error and the catch will handle it
                        throw new errors_1.GetDagMetadataApiError('Invalid metadata API response.');
                    }
                }
                catch (e) {
                    if (e.response && e.response.status === 404) {
                        // No need to do anything, the metadata for this token was not found
                        // There is no error here, we just return null
                        return null;
                    }
                    else {
                        // Error downloading metadata
                        if (retries === 0) {
                            // If we have no more retries left, then we propagate the error
                            throw new errors_1.GetDagMetadataApiError(e.message);
                        }
                        else {
                            // If we still have retry attempts, then we wait a few seconds and retry
                            yield helpers_1.default.sleep(retryInterval);
                            retries--;
                        }
                    }
                }
            }
        });
    }
};
exports.default = metadataApi;
//# sourceMappingURL=metadataApi.js.map