"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _version = _interopRequireDefault(require("./api/version"));

var _transaction = _interopRequireDefault(require("./transaction"));

var _tokens = _interopRequireDefault(require("./tokens"));

var _wallet = _interopRequireDefault(require("./wallet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Methods to validate version
 *
 * @namespace Version
 */
const version = {
  /**
   * Checks if the API version of the server the wallet is connected is valid for this wallet version
   *
   * @return {Promise} Promise that resolves after getting the version and updating Redux
   *
   * @memberof Version
   * @inner
   */
  checkApiVersion() {
    const promise = new Promise((resolve, reject) => {
      _version.default.getVersion(data => {
        // Update transaction weight constants
        _transaction.default.updateTransactionWeightConstants(data.min_tx_weight, data.min_tx_weight_coefficient, data.min_tx_weight_k);

        _tokens.default.updateDepositPercentage(data.token_deposit_percentage);

        _transaction.default.updateMaxInputsConstant(data.max_number_inputs);

        _transaction.default.updateMaxOutputsConstant(data.max_number_outputs);

        _wallet.default.updateRewardLockConstant(data.reward_spend_min_blocks);

        resolve(data);
      }).catch(error => {
        reject(error);
      });
    });
    return promise;
  }

};
var _default = version;
exports.default = _default;