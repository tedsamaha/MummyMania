"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAX_TOKEN_SYMBOL_SIZE = exports.MAX_TOKEN_NAME_SIZE = exports.DOWNLOAD_METADATA_RETRY_INTERVAL = exports.METADATA_RETRY_LIMIT = exports.LOAD_WALLET_RETRY_SLEEP = exports.LOAD_WALLET_MAX_RETRY = exports.TX_HASH_SIZE_BYTES = exports.EXPLORER_SERVICE_TESTNET_BASE_URL = exports.EXPLORER_SERVICE_BASE_URL = exports.WALLET_SERVICE_TESTNET_BASE_URL = exports.WALLET_SERVICE_BASE_URL = exports.SELECT_OUTPUTS_TIMEOUT = exports.TOKEN_DEPOSIT_PERCENTAGE = exports.MAX_OUTPUTS = exports.MAX_INPUTS = exports.TX_WEIGHT_CONSTANTS = exports.TX_MINING_TESTNET_URL = exports.TX_MINING_URL = exports.MIN_POLLING_INTERVAL = exports.STRATUM_TIMEOUT_RETURN_CODE = exports.HASH_KEY_SIZE = exports.HASH_ITERATIONS = exports.SEND_TOKENS_TIMEOUT = exports.TIMEOUT = exports.HATHOR_TOKEN_INDEX = exports.HATHOR_TOKEN_CONFIG = exports.AUTHORITY_TOKEN_DATA = exports.TOKEN_MELT_MASK = exports.TOKEN_MINT_MASK = exports.TOKEN_AUTHORITY_MASK = exports.TOKEN_INDEX_MASK = exports.HD_WALLET_ENTROPY = exports.MAX_OUTPUT_VALUE = exports.MAX_OUTPUT_VALUE_32 = exports.TOKEN_INFO_VERSION = exports.MERGED_MINED_BLOCK_VERSION = exports.CREATE_TOKEN_TX_VERSION = exports.DEFAULT_TX_VERSION = exports.BLOCK_VERSION = exports.DEFAULT_SERVER = exports.DEFAULT_SERVERS = exports.HATHOR_BIP44_CODE = exports.LIMIT_ADDRESS_GENERATION = exports.MIN_API_VERSION = exports.MAX_ADDRESSES_GET = exports.GAP_LIMIT = exports.GENESIS_TX = exports.GENESIS_BLOCK = exports.DECIMAL_PLACES = void 0;

/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Constants defined for the Hathor Wallet
 * @module Constants
 */

/**
 * Quantity of decimal places of tokens amount
 */
const DECIMAL_PLACES = 2;
/**
 * ID of the genesis block
 *
 * @deprecated since version 0.25.0.
 */

exports.DECIMAL_PLACES = DECIMAL_PLACES;
const GENESIS_BLOCK = ['000164e1e7ec7700a18750f9f50a1a9b63f6c7268637c072ae9ee181e58eb01b'];
/**
 * ID of the genesis transactions
 *
 * @deprecated since version 0.25.0.
 */

exports.GENESIS_BLOCK = GENESIS_BLOCK;
const GENESIS_TX = ['00029b7f8051f6ebdc0338d02d4a8cfbd662500ee03224bbee75a6f2da0350b0', '0001e887c7b5ec3b4e57033d849a80d8bccbe3a749abfa87cc31c663530f3f4e'];
/**
 * How many addresses we can have without being used
 */

exports.GENESIS_TX = GENESIS_TX;
const GAP_LIMIT = 20;
/**
 * The maximum number of addresses to add in the address_history GET request
 */

exports.GAP_LIMIT = GAP_LIMIT;
const MAX_ADDRESSES_GET = 20;
/**
 * Minimum expected API version
 */

exports.MAX_ADDRESSES_GET = MAX_ADDRESSES_GET;
const MIN_API_VERSION = '0.37.2';
/**
 * If we should forbid to generate a quantity of unused addresses more than the GAP_LIMIT
 */

exports.MIN_API_VERSION = MIN_API_VERSION;
const LIMIT_ADDRESS_GENERATION = true;
/**
 * Hathor address BIP44 code
 * (listed here: https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
 */

exports.LIMIT_ADDRESS_GENERATION = LIMIT_ADDRESS_GENERATION;
const HATHOR_BIP44_CODE = 280;
/**
 * Server options for the user to choose which one to connect
 *
 * @deprecated since version 0.25.0.
 *
 * You should use the methods in src/config.ts instead.
 */

exports.HATHOR_BIP44_CODE = HATHOR_BIP44_CODE;
const DEFAULT_SERVERS = ['https://node1.mainnet.hathor.network/v1a/', 'https://node2.mainnet.hathor.network/v1a/'];
/**
 * Default server user will connect when none have been chosen
 *
 * @deprecated since version 0.25.0.
 *
 * You should use the methods in src/config.ts instead.
 */

exports.DEFAULT_SERVERS = DEFAULT_SERVERS;
const DEFAULT_SERVER = DEFAULT_SERVERS[0];
/**
 * Block version field
 */

exports.DEFAULT_SERVER = DEFAULT_SERVER;
const BLOCK_VERSION = 0;
/**
 * Transaction version field
 */

exports.BLOCK_VERSION = BLOCK_VERSION;
const DEFAULT_TX_VERSION = 1;
/**
 * Create token transaction version field
 */

exports.DEFAULT_TX_VERSION = DEFAULT_TX_VERSION;
const CREATE_TOKEN_TX_VERSION = 2;
/**
 * Merged mined block version field
 */

exports.CREATE_TOKEN_TX_VERSION = CREATE_TOKEN_TX_VERSION;
const MERGED_MINED_BLOCK_VERSION = 3;
/**
 * Create token information version
 * so far we expect name and symbol
 */

exports.MERGED_MINED_BLOCK_VERSION = MERGED_MINED_BLOCK_VERSION;
const TOKEN_INFO_VERSION = 1;
/**
 * Max value (inclusive) before having to use 8 bytes: 2147483648 ~= 2.14748e+09
 */

exports.TOKEN_INFO_VERSION = TOKEN_INFO_VERSION;
const MAX_OUTPUT_VALUE_32 = 2 ** 31 - 1;
/**
 * Max accepted value for an output
 * Because of a precision problem in javascript we don't handle all 8 bytes of value
 */

exports.MAX_OUTPUT_VALUE_32 = MAX_OUTPUT_VALUE_32;
const MAX_OUTPUT_VALUE = 2 ** 43;
/**
 * Entropy for the new HD wallet words
 */

exports.MAX_OUTPUT_VALUE = MAX_OUTPUT_VALUE;
const HD_WALLET_ENTROPY = 256;
/**
 * Mask to get token index from token data
 */

exports.HD_WALLET_ENTROPY = HD_WALLET_ENTROPY;
const TOKEN_INDEX_MASK = 0b01111111;
/**
 * Mask to check if it's authority output (first bit indicates it)
 * For further information: https://gitlab.com/HathorNetwork/rfcs/blob/master/text/0004-tokens.md
 */

exports.TOKEN_INDEX_MASK = TOKEN_INDEX_MASK;
const TOKEN_AUTHORITY_MASK = 0b10000000;
/**
 * Mask to check if it's mint UTXO (last bit indicates it)
 * For further information: https://gitlab.com/HathorNetwork/rfcs/blob/master/text/0004-tokens.md
 */

exports.TOKEN_AUTHORITY_MASK = TOKEN_AUTHORITY_MASK;
const TOKEN_MINT_MASK = 0b00000001;
/**
 * Mask to check if it's melt UTXO (second to last bit indicates it)
 * For further information: https://gitlab.com/HathorNetwork/rfcs/blob/master/text/0004-tokens.md
 */

exports.TOKEN_MINT_MASK = TOKEN_MINT_MASK;
const TOKEN_MELT_MASK = 0b00000010;
/**
 * Token data for an authority output of the first token in a transaction.
 * As most transactions with authority outputs have only one token, it may be directly used, as a shortcut.
 */

exports.TOKEN_MELT_MASK = TOKEN_MELT_MASK;
const AUTHORITY_TOKEN_DATA = TOKEN_AUTHORITY_MASK | 1;
/**
 * Hathor token config
 */

exports.AUTHORITY_TOKEN_DATA = AUTHORITY_TOKEN_DATA;
const HATHOR_TOKEN_CONFIG = {
  'name': 'Hathor',
  'symbol': 'HTR',
  'uid': '00'
};
/**
 * Hathor token default index
 */

exports.HATHOR_TOKEN_CONFIG = HATHOR_TOKEN_CONFIG;
const HATHOR_TOKEN_INDEX = 0;
/**
 * Default timeout for each request in milliseconds
 */

exports.HATHOR_TOKEN_INDEX = HATHOR_TOKEN_INDEX;
const TIMEOUT = 10000;
/**
 * Default timeout for send tokens request in milliseconds
 */

exports.TIMEOUT = TIMEOUT;
const SEND_TOKENS_TIMEOUT = 300000;
/**
 * Number of iterations to execute when hashing the password
 *
 * Even though NIST recommeds at least 10,000 iterations (https://pages.nist.gov/800-63-3/sp800-63b.html#sec5),
 * some tests show that it takes ~3s in iPhone 7 and ~1,5s in Galaxy S8.
 * That's why we have decided to keep the default as 1,000 for now.
 */

exports.SEND_TOKENS_TIMEOUT = SEND_TOKENS_TIMEOUT;
const HASH_ITERATIONS = 1000;
/**
 * Size of the key to hash the password
 */

exports.HASH_ITERATIONS = HASH_ITERATIONS;
const HASH_KEY_SIZE = 256;
/**
 * Return code of the send_tokens response when there is a stratum timeout
 */

exports.HASH_KEY_SIZE = HASH_KEY_SIZE;
const STRATUM_TIMEOUT_RETURN_CODE = 'stratum_timeout';
/**
 * Minimum job status poll to update job data when mining a tx
 */

exports.STRATUM_TIMEOUT_RETURN_CODE = STRATUM_TIMEOUT_RETURN_CODE;
const MIN_POLLING_INTERVAL = 0.5;
/**
 * Base URL for the tx mining api
 *
 * @deprecated since version 0.25.0.
 *
 * You should use the methods in src/config.ts instead.
 */

exports.MIN_POLLING_INTERVAL = MIN_POLLING_INTERVAL;
const TX_MINING_URL = 'https://txmining.mainnet.hathor.network/';
/**
 * Base URL for the tx mining api in the testnet
 *
 * @deprecated since version 0.25.0.
 *
 * You should use the methods in src/config.ts instead.
 */

exports.TX_MINING_URL = TX_MINING_URL;
const TX_MINING_TESTNET_URL = 'https://txmining.testnet.hathor.network/';
/**
 * Constants to calculate weight
 */

exports.TX_MINING_TESTNET_URL = TX_MINING_TESTNET_URL;
const TX_WEIGHT_CONSTANTS = {
  txMinWeight: 14,
  txWeightCoefficient: 1.6,
  txMinWeightK: 100
};
/**
 * Maximum number of inputs
 */

exports.TX_WEIGHT_CONSTANTS = TX_WEIGHT_CONSTANTS;
const MAX_INPUTS = 255;
/**
 * Maximum number of outputs
 */

exports.MAX_INPUTS = MAX_INPUTS;
const MAX_OUTPUTS = 255;
/**
 * Percentage of Hathor to deposit when creating a token
 */

exports.MAX_OUTPUTS = MAX_OUTPUTS;
const TOKEN_DEPOSIT_PERCENTAGE = 0.01;
/**
 * Timeout in milliseconds to call the method to set all selected outputs of a tx as 'selected': false
 */

exports.TOKEN_DEPOSIT_PERCENTAGE = TOKEN_DEPOSIT_PERCENTAGE;
const SELECT_OUTPUTS_TIMEOUT = 1000 * 60;
/**
 * Wallet service URL
 *
 * @deprecated since version 0.25.0.
 *
 * You should use the methods in src/config.ts instead.
 */

exports.SELECT_OUTPUTS_TIMEOUT = SELECT_OUTPUTS_TIMEOUT;
const WALLET_SERVICE_BASE_URL = 'https://wallet-service.hathor.network/';
exports.WALLET_SERVICE_BASE_URL = WALLET_SERVICE_BASE_URL;
const WALLET_SERVICE_TESTNET_BASE_URL = 'https://wallet-service.testnet.hathor.network/';
/**
 * Explorer service URL
 *
 * @deprecated since version 0.25.0.
 *
 * You should use the methods in src/config.ts instead.
 */

exports.WALLET_SERVICE_TESTNET_BASE_URL = WALLET_SERVICE_TESTNET_BASE_URL;
const EXPLORER_SERVICE_BASE_URL = 'https://explorer-service.hathor.network/';
exports.EXPLORER_SERVICE_BASE_URL = EXPLORER_SERVICE_BASE_URL;
const EXPLORER_SERVICE_TESTNET_BASE_URL = 'https://explorer-service.testnet.hathor.network/';
/**
 * Size in bytes of a transaction hash (32 bytes)
 */

exports.EXPLORER_SERVICE_TESTNET_BASE_URL = EXPLORER_SERVICE_TESTNET_BASE_URL;
const TX_HASH_SIZE_BYTES = 32;
/**
 * Maximum number of retries allowed when an error different
 * from client timeout happens when loading wallet history
 */

exports.TX_HASH_SIZE_BYTES = TX_HASH_SIZE_BYTES;
const LOAD_WALLET_MAX_RETRY = 5;
/**
 * Time in milliseconds between each load wallet retry
 */

exports.LOAD_WALLET_MAX_RETRY = LOAD_WALLET_MAX_RETRY;
const LOAD_WALLET_RETRY_SLEEP = 5000;
/**
 * Limit of retries when downloading token metadata
 */

exports.LOAD_WALLET_RETRY_SLEEP = LOAD_WALLET_RETRY_SLEEP;
const METADATA_RETRY_LIMIT = 3;
/**
 * Interval between metadata download retries in milliseconds
 */

exports.METADATA_RETRY_LIMIT = METADATA_RETRY_LIMIT;
const DOWNLOAD_METADATA_RETRY_INTERVAL = 5000;
/**
 * Maximum characters of created token name
 */

exports.DOWNLOAD_METADATA_RETRY_INTERVAL = DOWNLOAD_METADATA_RETRY_INTERVAL;
const MAX_TOKEN_NAME_SIZE = 30;
/**
 * Maximum characters of created token symbol
 */

exports.MAX_TOKEN_NAME_SIZE = MAX_TOKEN_NAME_SIZE;
const MAX_TOKEN_SYMBOL_SIZE = 5;
exports.MAX_TOKEN_SYMBOL_SIZE = MAX_TOKEN_SYMBOL_SIZE;