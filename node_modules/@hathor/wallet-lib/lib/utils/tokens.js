"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const helpers_1 = __importDefault(require("./helpers"));
const buffer_1 = __importDefault(require("buffer"));
const tokens = {
    /**
     * Check if string is a valid configuration token string.
     *
     * @param {string} config Token configuration string
     *
     * @return {Boolean} If config string is valid
     *
     * @memberof Tokens
     * @inner
     */
    isConfigurationStringValid(config) {
        const tokenData = this.getTokenFromConfigurationString(config);
        if (tokenData === null) {
            return false;
        }
        return true;
    },
    /**
     * Returns token configuration string
     *
     * @param {string} uid Token uid
     * @param {string} name Token name
     * @param {string} symbol Token symbol
     *
     * @return {string} Configuration string of the token
     *
     * @memberof Tokens
     * @inner
     *
     */
    getConfigurationString(uid, name, symbol) {
        const partialConfig = `${name}:${symbol}:${uid}`;
        const checksum = helpers_1.default.getChecksum(buffer_1.default.Buffer.from(partialConfig));
        return `[${partialConfig}:${checksum.toString('hex')}]`;
    },
    /**
     * Returns token from configuration string
     * Configuration string has the following format:
     * [name:symbol:uid:checksum]
     *
     * @param {string} config Configuration string with token data plus a checksum
     *
     * @return {Object} token {'uid', 'name', 'symbol'} or null in case config is invalid
     *
     * @memberof Tokens
     * @inner
     *
     */
    getTokenFromConfigurationString(config) {
        // First we validate that first char is [ and last one is ]
        if (!config || config[0] !== '[' || config[config.length - 1] !== ']') {
            return null;
        }
        // Then we remove the [] and split the string by :
        const configArr = config.slice(1, -1).split(':');
        if (configArr.length < 4) {
            return null;
        }
        // Last element is the checksum
        const checksum = configArr.splice(-1);
        const configWithoutChecksum = configArr.join(':');
        const correctChecksum = helpers_1.default.getChecksum(buffer_1.default.Buffer.from(configWithoutChecksum));
        if (correctChecksum.toString('hex') !== checksum[0]) {
            return null;
        }
        const uid = configArr.pop();
        const symbol = configArr.pop();
        // Assuming that the name might have : on it
        const name = configArr.join(':');
        return { uid, name, symbol };
    },
    /**
     * Gets the token index to be added to the tokenData in the output from tx
     *
     * @param {Object} tokens Array of token configs
     * @param {Object} uid Token uid to return the index
     *
     * @return {number} Index of token to be set as tokenData in output tx
     *
     * @memberof Tokens
     * @inner
     */
    getTokenIndex(tokens, uid) {
        // If token is Hathor, index is always 0
        // Otherwise, it is always the array index + 1
        if (uid === constants_1.HATHOR_TOKEN_CONFIG.uid) {
            return 0;
        }
        else {
            const tokensWithoutHathor = tokens.filter((token) => token.uid !== constants_1.HATHOR_TOKEN_CONFIG.uid);
            const myIndex = tokensWithoutHathor.findIndex((token) => token.uid === uid);
            return myIndex + 1;
        }
    },
    /**
     * Checks if the uid passed is from Hathor token
     *
     * @param {string} uid UID to check if is Hathor's
     *
     * @return {boolean} true if is Hathor uid, false otherwise
     *
     * @memberof Tokens
     * @inner
     */
    isHathorToken(uid) {
        return uid === constants_1.HATHOR_TOKEN_CONFIG.uid;
    },
    /**
     * Calculate deposit value for the given token mint amount
     *
     * @param {number} mintAmount Amount of tokens being minted
     *
     * @return {number}
     * @memberof Tokens
     * @inner
     *
     */
    getDepositAmount(mintAmount) {
        return Math.ceil(constants_1.TOKEN_DEPOSIT_PERCENTAGE * mintAmount);
    },
    /**
     * Calculate withdraw value for the given token melt amount
     *
     * @param {number} meltAmount Amount of tokens being melted
     *
     * @return {number}
     * @memberof Tokens
     * @inner
     *
     */
    getWithdrawAmount(meltAmount) {
        return Math.floor(constants_1.TOKEN_DEPOSIT_PERCENTAGE * meltAmount);
    },
};
exports.default = tokens;
//# sourceMappingURL=tokens.js.map